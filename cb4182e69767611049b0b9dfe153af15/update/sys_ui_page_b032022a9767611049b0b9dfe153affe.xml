<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_page">
    <sys_ui_page action="INSERT_OR_UPDATE">
        <category>general</category>
        <client_script><![CDATA[var delay = 3000; //3 seconds
var retry = 2;
var url = document.getElementById("webhook_url").value;
var token = document.getElementById("webhook_token").value;
var mid_server = document.getElementById("mid_server").value;

function insert_record() {
    var urlParam = '<parameter name="url" value="' + url + '" />';
    var tokenParam = '<parameter name="token" value="' + token + '" />';
    var jsonParam = '<parameter name="json_data" value="{&quot;Hello&quot;:&quot;World&quot;}" />';

    var request = new GlideRecord("ecc_queue");
    request.initialize();
    request.name = "EDA Webhook";
    request.agent = "mid.server." + mid_server;
    request.payload = '<parameters><parameter name="script" value="var webhook = new EdaWebhookForward(); res = webhook.send();"/>' + urlParam + tokenParam + jsonParam + '</parameters>';
    request.queue = "output";
    request.topic = "JavascriptProbe";
    var request_id = request.insert();
    if (!request_id) {
        gs.error("REQUEST_ID is null");
        return;
    }

    return request_id;
}

function check_record(request_id) {
    var response_sysid;
    var response = new GlideRecord("ecc_queue");
    response.addQuery("response_to", request_id);
    response.addQuery("queue", "input");
    response.query();
    if (response.next()) {
        var parser = new DOMParser();
        var xmlDoc = parser.parseFromString(response.payload, "text/xml");
        status = xmlDoc.getElementsByTagName("output")[0].textContent;
		alert(status);
        var output = document.getElementById("output");
        if (status == "200")
            alert("Webhook configuration test status: succeeded!");
        //output.innerHTML = "<label>Webhook configuration status: " + status + "</label>";
    } else
        alert("Webhook configuration test status: failed! Try again!");
    //output.innerHTML = "<label style='color:red'>Webhook configuration status: " + status + "</label>";
}

function webhook_test() {
    id = insert_record();

    timeout = setTimeout(function() {
        check_record(id);
    }, delay);

	//clearTimeout(timeout);
}]]></client_script>
        <description/>
        <direct>false</direct>
        <endpoint>x_1070098_my_eda_0_eda_configuration.do</endpoint>
        <html><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">
<g:evaluate var="jvar_check_incident_created"> 
   var check_incident_created = gs.getProperty('x_1070098_my_eda_0.check_incident_created'); 
   check_incident_created; 
</g:evaluate>
<g:evaluate var="jvar_check_problem_created"> 
   var check_problem_created = gs.getProperty('x_1070098_my_eda_0.check_problem_created'); 
   check_problem_created; 
</g:evaluate>
<g:evaluate var="jvar_check_catalog_created"> 
   var check_catalog_created = gs.getProperty('x_1070098_my_eda_0.check_catalog_created'); 
   check_catalog_created; 
</g:evaluate>
<g:evaluate var="jvar_check_incident_state"> 
   var check_incident_state = gs.getProperty('x_1070098_my_eda_0.check_incident_state'); 
   check_incident_state; 
</g:evaluate>
<g:evaluate var="jvar_check_problem_state"> 
   var check_problem_state = gs.getProperty('x_1070098_my_eda_0.check_problem_state'); 
   check_problem_state; 
</g:evaluate>
<g:evaluate var="jvar_check_catalog_approved"> 
   var check_catalog_approved = gs.getProperty('x_1070098_my_eda_0.check_catalog_approved'); 
   check_catalog_approved; 
</g:evaluate>
<g:evaluate var="jvar_webhook_url"> 
   var webhook_url = gs.getProperty('x_1070098_my_eda_0.webhook_url'); 
   webhook_url; 
</g:evaluate>
<g:evaluate var="jvar_webhook_token"> 
   var webhook_token = gs.getProperty('x_1070098_my_eda_0.webhook_token'); 
   webhook_token; 
</g:evaluate>
<g:evaluate var="jvar_mid_server"> 
   var mid_server = gs.getProperty('x_1070098_my_eda_0.mid_server'); 
   mid_server; 
</g:evaluate>
<style>	
legend {
font-family: "Lucida Sans Unicode", "Lucida Grande", sans-serif;
font-size: 1.5em;
padding: 0.5em;
font-weight: bold;
}
label {
font-family: "Lucida Sans Unicode", "Lucida Grande", sans-serif;
font-size: 1.0em;
padding: 0.5em;
font-weight: bold;
}
fieldset {
border: none;
padding: 0;
width: 80%
}
input {
padding: 0.5em;
}
</style>

<h1> Event Driven Ansible Configurations</h1>

<body>

<g:ui_form>
<fieldset>
<legend>Which table do you want to monitor? </legend>
<table>
	<tr>
		<td>
			<label style="font-size: 1.2em;">Incident</label>
		</td>
		<td>
			<label><g:ui_checkbox name="check_incident_state" value="${jvar_check_incident_state}"/>When State Changed</label>
		</td>
		<td>
			<label><g:ui_checkbox name="check_incident_created" value="${jvar_check_incident_created}"/>When Created</label>
		</td>
	</tr>
	<tr>
		<td>
			<label style="font-size: 1.2em;">Problem</label>
		</td>
		<td>
			<label><g:ui_checkbox name="check_problem_state" value="${jvar_check_problem_state}"/>When State Changed</label>
		</td>
		<td>
			<label><g:ui_checkbox name="check_problem_created" value="${jvar_check_problem_created}"/>When Created</label>
		</td>
	</tr>
	<tr>
		<td>
			<label style="font-size: 1.2em;">Catalog Request</label>
		</td>
		<td>
			<label><g:ui_checkbox name="check_catalog_approved" value="${jvar_check_catalog_approved}"/>When Approved</label>
		</td>
		<td>
			<label><g:ui_checkbox name="check_catalog_created" value="${jvar_check_catalog_created}"/>When Created</label>
		</td>
	</tr>
<!-- 
	<tr>
		<td colspan="2">
			<j:if test="${jvar_check_catalog}">
				<p>
<g:evaluate var="jvar_gr" object="true"> 
  var gr = new GlideRecord("sc_catalog"); 
  gr.addQuery("active", true); 
  gr.query(); 
  gr; 
</g:evaluate>
	<table style="font-family: Lucida Sans Unicode, Lucida Grande, sans-serif;
font-weight: bold;font-size: 1.2em; padding: 0.5em;">

<j:while test="${jvar_gr.next()}">
  <tr><td>
  <input id="${jvar_gr.getValue('sys_id')}" name="${jvar_gr.getValue('title')}" type="hidden"/>
	</td>
	<td>
  <input class="catalog" value="${jvar_gr.getValue('sys_id')}" name="${jvar_gr.getValue('title')}" type="checkbox" onClick="list_categories_by_catalog(this);">${jvar_gr.getValue('title')}</input>
	  </td></tr>
</j:while>		

	</table></p>
			</j:if></td>
	</tr>
-->
</table>
</fieldset>
<fieldset>

<j:if test="${jvar_check_catalog}">
<p>
<div id="category_list" style="display:none">Categories</div>	
</p>
<p>
<div id="category_list" style="display:none">Categories</div>	
</p>
</j:if>
</fieldset>
<br></br>
<fieldset>
	<div><label style="font-size: 1.2em;">Click OK to save the configuration.</label></div>
	<g:dialog_buttons_ok_cancel ok="return true" cancel="return false"/>
	<input type="hidden" name="application_sys_id" value="cb4182e69767611049b0b9dfe153af15"/>
	<input type="hidden" id="cancelled" name="cancelled" value="false"/>
</fieldset>
</g:ui_form>
<br></br>
<fieldset><legend>Do you want to test webhook configuration? </legend>
	<table>
		<tr>
			<td><label>EDA Webhook URL starting with https or http:</label></td>
			<td><input type="text" name="webhook_url" id="webhook_url" size="50" value="${jvar_webhook_url}"/></td>
		</tr>
		<tr>
			<td><label>EDA Webhook authorization token:</label></td>
			<td><input type="password" name="webhook_token" id="webhook_token" size="50" value="${jvar_webhook_token}"/></td>
		</tr>
		<tr>
			<td><label>Mid Server configured to forward event to EDA controller on premise:</label></td>
			<td><input type="text" name="mid_server" id="mid_server" size="50" value="${jvar_mid_server}"/></td>
		</tr>
	</table>
</fieldset>
<fieldset>
	<div><label style="font-size: 1.2em;">Click TEST to test the webhook configuration.</label></div>
	<p><g:dialog_button onclick="webhook_test()" type="button">TEST</g:dialog_button></p>
	<p id="output" />
</fieldset>
</body>
</j:jelly>]]></html>
        <name>eda_configuration</name>
        <processing_script><![CDATA[//set the value of the check_incident system property 
gs.setProperty("x_1070098_my_eda_0.check_incident_state", check_incident_state); 
 
//set the value of the check_problem sys property 
gs.setProperty("x_1070098_my_eda_0.check_problem_state", check_problem_state); 
 
//set the value of the check_catalog sys property 
gs.setProperty("x_1070098_my_eda_0.check_catalog_approved", check_catalog_approved); 

//set the value of the trigger_when sys property 
gs.setProperty("x_1070098_my_eda_0.check_catalog_created", check_catalog_created);

//set the value of the trigger_when sys property 
gs.setProperty("x_1070098_my_eda_0.check_incident_created", check_incident_created);

//set the value of the trigger_when sys property 
gs.setProperty("x_1070098_my_eda_0.check_problem_created", check_problem_created);

//set the value of the trigger_when sys property 
//gs.setProperty("x_1070098_my_eda_0.webhook_url", webhook_url);

//set the value of the trigger_when sys property 
//gs.setProperty("x_1070098_my_eda_0.webhook_token", webhook_token);

//set the value of the trigger_when sys property 
//gs.setProperty("x_1070098_my_eda_0.mid_server", mid_server);]]></processing_script>
        <sys_class_name>sys_ui_page</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-23 15:39:25</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>b032022a9767611049b0b9dfe153affe</sys_id>
        <sys_mod_count>191</sys_mod_count>
        <sys_name>eda_configuration</sys_name>
        <sys_package display_value="Event-Driven Ansible Notification Service" source="x_1070098_my_eda_0">cb4182e69767611049b0b9dfe153af15</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Event-Driven Ansible Notification Service">cb4182e69767611049b0b9dfe153af15</sys_scope>
        <sys_update_name>sys_ui_page_b032022a9767611049b0b9dfe153affe</sys_update_name>
        <sys_updated_by>hui_song</sys_updated_by>
        <sys_updated_on>2023-07-11 13:05:47</sys_updated_on>
    </sys_ui_page>
</record_update>
